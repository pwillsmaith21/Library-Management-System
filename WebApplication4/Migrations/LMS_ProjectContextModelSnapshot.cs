// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication4.Models;

#nullable disable

namespace WebApplication4.Migrations
{
    [DbContext(typeof(LMS_ProjectContext))]
    partial class LMS_ProjectContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("WebApplication4.Models.AdminT", b =>
                {
                    b.Property<int>("AdminId")
                        .HasColumnType("int")
                        .HasColumnName("AdminID");

                    b.Property<string>("AdminAddress")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AdminCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("AdminDob")
                        .HasColumnType("date")
                        .HasColumnName("AdminDOB");

                    b.Property<string>("AdminEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AdminFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AdminLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AdminPassword")
                        .IsRequired()
                        .HasMaxLength(66)
                        .IsUnicode(false)
                        .HasColumnType("char(66)")
                        .IsFixedLength();

                    b.Property<string>("AdminPhone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("AdminSalary")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("AdminState")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("AdminZipCode")
                        .HasColumnType("int");

                    b.HasKey("AdminId")
                        .HasName("PK__ADMIN_T__719FE4E84E8B61D9");

                    b.ToTable("ADMIN_T", (string)null);
                });

            modelBuilder.Entity("WebApplication4.Models.AuthorT", b =>
                {
                    b.Property<int>("AuthorId")
                        .HasColumnType("int")
                        .HasColumnName("AuthorID");

                    b.Property<string>("AuthorFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AuthorLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("ItemID");

                    b.HasKey("AuthorId");

                    b.HasIndex("ItemId");

                    b.HasIndex(new[] { "AuthorId" }, "UQ__AUTHOR_T__70DAFC159F24DC93")
                        .IsUnique();

                    b.ToTable("AUTHOR_T", (string)null);
                });

            modelBuilder.Entity("WebApplication4.Models.CreditcardT", b =>
                {
                    b.Property<string>("CardAddress")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CardCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("CardCvv")
                        .HasColumnType("int")
                        .HasColumnName("CardCVV");

                    b.Property<DateTime?>("CardExpDate")
                        .HasColumnType("date");

                    b.Property<string>("CardHolderName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CardNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CardState")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("CardZipCode")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasIndex("UserId");

                    b.ToTable("CREDITCARD_T", (string)null);
                });

            modelBuilder.Entity("WebApplication4.Models.ItemholdT", b =>
                {
                    b.Property<int?>("ItemHold1")
                        .HasColumnType("int");

                    b.Property<int?>("ItemHold2")
                        .HasColumnType("int");

                    b.Property<int?>("ItemHold3")
                        .HasColumnType("int");

                    b.Property<int?>("ItemHold4")
                        .HasColumnType("int");

                    b.Property<int?>("ItemHold5")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasIndex("ItemHold1");

                    b.HasIndex("ItemHold2");

                    b.HasIndex("ItemHold3");

                    b.HasIndex("ItemHold4");

                    b.HasIndex("ItemHold5");

                    b.ToTable("ITEMHOLD_T", (string)null);
                });

            modelBuilder.Entity("WebApplication4.Models.ItemstockT", b =>
                {
                    b.Property<int>("ItemNumber")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ItemNumber");

                    b.ToTable("ITEMSTOCK_T", (string)null);
                });

            modelBuilder.Entity("WebApplication4.Models.ItemT", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("ItemID");

                    b.Property<int?>("Author")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DatePublished")
                        .HasColumnType("date");

                    b.Property<string>("Duration")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Genre")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ItemType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Password")
                        .HasColumnType("int")
                        .HasColumnName("password");

                    b.Property<int?>("Publisher")
                        .HasColumnType("int");

                    b.Property<decimal?>("PurchasePrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("RentalPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Zipcode")
                        .HasColumnType("int")
                        .HasColumnName("zipcode");

                    b.HasKey("ItemId")
                        .HasName("PK__ITEM_T__727E83EB6C1B5D75");

                    b.HasIndex("Author");

                    b.HasIndex("Publisher");

                    b.ToTable("ITEM_T", (string)null);
                });

            modelBuilder.Entity("WebApplication4.Models.LibrarianCard", b =>
                {
                    b.Property<string>("AccountStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("CardNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("IssueDate")
                        .HasColumnType("date");

                    b.HasIndex("CardNumber");

                    b.ToTable("LIBRARIAN_CARD", (string)null);
                });

            modelBuilder.Entity("WebApplication4.Models.LibrarianT", b =>
                {
                    b.Property<int>("LibrarianId")
                        .HasColumnType("int")
                        .HasColumnName("LibrarianID");

                    b.Property<string>("LibrarianAddress")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LibrarianCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LibrarianDob")
                        .HasColumnType("date")
                        .HasColumnName("LibrarianDOB");

                    b.Property<string>("LibrarianEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LibrarianFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LibrarianLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LibrarianPassword")
                        .IsRequired()
                        .HasMaxLength(66)
                        .IsUnicode(false)
                        .HasColumnType("char(66)")
                        .IsFixedLength();

                    b.Property<string>("LibrarianPhone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("LibrarianSalary")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("LibrarianState")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("LibrarianZipCode")
                        .HasColumnType("int");

                    b.HasKey("LibrarianId")
                        .HasName("PK__LIBRARIA__E4D86D9DA77FF6A5");

                    b.ToTable("LIBRARIAN_T", (string)null);
                });

            modelBuilder.Entity("WebApplication4.Models.PublisherT", b =>
                {
                    b.Property<int>("PublisherId")
                        .HasColumnType("int")
                        .HasColumnName("PublisherID");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("ItemID");

                    b.Property<string>("PublisherName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("PublisherId");

                    b.HasIndex("ItemId");

                    b.HasIndex(new[] { "PublisherId" }, "UQ__PUBLISHE__4C657E4A548DE844")
                        .IsUnique();

                    b.ToTable("PUBLISHER_T", (string)null);
                });

            modelBuilder.Entity("WebApplication4.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("city");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime2")
                        .HasColumnName("DOB");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("firstName");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("lastName");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int")
                        .HasColumnName("phoneNumber");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("state");

                    b.Property<int?>("Zipcode")
                        .HasColumnType("int")
                        .HasColumnName("zipcode");

                    b.HasKey("UserId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("WebApplication4.Models.UserT", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<string>("UserAddress")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UserDob")
                        .HasColumnType("date")
                        .HasColumnName("UserDOB");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasMaxLength(66)
                        .IsUnicode(false)
                        .HasColumnType("char(66)")
                        .IsFixedLength();

                    b.Property<string>("UserPhone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserState")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("UserZipCode")
                        .HasColumnType("int");

                    b.HasKey("UserId")
                        .HasName("PK__USER_T__1788CCAC92BB7317");

                    b.ToTable("USER_T", (string)null);
                });

            modelBuilder.Entity("WebApplication4.Models.AuthorT", b =>
                {
                    b.HasOne("WebApplication4.Models.ItemT", "Item")
                        .WithMany("AuthorTs")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK__AUTHOR_T__ItemID__4316F928");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("WebApplication4.Models.CreditcardT", b =>
                {
                    b.HasOne("WebApplication4.Models.UserT", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__CREDITCAR__UserI__47DBAE45");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication4.Models.ItemholdT", b =>
                {
                    b.HasOne("WebApplication4.Models.ItemT", "ItemHold1Navigation")
                        .WithMany()
                        .HasForeignKey("ItemHold1")
                        .HasConstraintName("FK__ITEMHOLD___ItemH__4AB81AF0");

                    b.HasOne("WebApplication4.Models.ItemT", "ItemHold2Navigation")
                        .WithMany()
                        .HasForeignKey("ItemHold2")
                        .HasConstraintName("FK__ITEMHOLD___ItemH__4BAC3F29");

                    b.HasOne("WebApplication4.Models.ItemT", "ItemHold3Navigation")
                        .WithMany()
                        .HasForeignKey("ItemHold3")
                        .HasConstraintName("FK__ITEMHOLD___ItemH__4CA06362");

                    b.HasOne("WebApplication4.Models.ItemT", "ItemHold4Navigation")
                        .WithMany()
                        .HasForeignKey("ItemHold4")
                        .HasConstraintName("FK__ITEMHOLD___ItemH__4D94879B");

                    b.HasOne("WebApplication4.Models.ItemT", "ItemHold5Navigation")
                        .WithMany()
                        .HasForeignKey("ItemHold5")
                        .HasConstraintName("FK__ITEMHOLD___ItemH__4E88ABD4");

                    b.Navigation("ItemHold1Navigation");

                    b.Navigation("ItemHold2Navigation");

                    b.Navigation("ItemHold3Navigation");

                    b.Navigation("ItemHold4Navigation");

                    b.Navigation("ItemHold5Navigation");
                });

            modelBuilder.Entity("WebApplication4.Models.ItemstockT", b =>
                {
                    b.HasOne("WebApplication4.Models.ItemT", "ItemNumberNavigation")
                        .WithOne("ItemstockT")
                        .HasForeignKey("WebApplication4.Models.ItemstockT", "ItemNumber")
                        .IsRequired()
                        .HasConstraintName("FK__ITEMSTOCK__ItemN__4222D4EF");

                    b.Navigation("ItemNumberNavigation");
                });

            modelBuilder.Entity("WebApplication4.Models.ItemT", b =>
                {
                    b.HasOne("WebApplication4.Models.AuthorT", "AuthorNavigation")
                        .WithMany("ItemTs")
                        .HasForeignKey("Author")
                        .HasConstraintName("FK__ITEM_T__Author__3F466844");

                    b.HasOne("WebApplication4.Models.PublisherT", "PublisherNavigation")
                        .WithMany("ItemTs")
                        .HasForeignKey("Publisher")
                        .HasConstraintName("FK__ITEM_T__Publishe__403A8C7D");

                    b.Navigation("AuthorNavigation");

                    b.Navigation("PublisherNavigation");
                });

            modelBuilder.Entity("WebApplication4.Models.LibrarianCard", b =>
                {
                    b.HasOne("WebApplication4.Models.LibrarianT", "CardNumberNavigation")
                        .WithMany()
                        .HasForeignKey("CardNumber")
                        .HasConstraintName("FK__LIBRARIAN__CardN__5070F446");

                    b.Navigation("CardNumberNavigation");
                });

            modelBuilder.Entity("WebApplication4.Models.PublisherT", b =>
                {
                    b.HasOne("WebApplication4.Models.ItemT", "Item")
                        .WithMany("PublisherTs")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK__PUBLISHER__ItemI__440B1D61");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("WebApplication4.Models.AuthorT", b =>
                {
                    b.Navigation("ItemTs");
                });

            modelBuilder.Entity("WebApplication4.Models.ItemT", b =>
                {
                    b.Navigation("AuthorTs");

                    b.Navigation("ItemstockT");

                    b.Navigation("PublisherTs");
                });

            modelBuilder.Entity("WebApplication4.Models.PublisherT", b =>
                {
                    b.Navigation("ItemTs");
                });
#pragma warning restore 612, 618
        }
    }
}
